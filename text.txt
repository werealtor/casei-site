<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Case&i — Minimal</title>
  <style>
    :root { --black:#111; --gray:#f4f4f5; }
    *{box-sizing:border-box}
    body{margin:0;font:16px/1.5 -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Arial,sans-serif;color:#111;background:#fff}
    header{padding:18px 16px;text-align:center}
    h1{margin:0 0 4px;font-size:20px}
    p.sub{margin:0;color:#666;font-size:13px}

    .wrap{max-width:760px;margin:0 auto;padding:0 14px 32px}

    /* Hero */
    .hero{margin:12px auto 8px}
    .hero img,.hero video{width:100%;display:block;border-radius:14px;background:#000}
    .actions{display:grid;grid-template-columns:1fr 1fr;gap:10px;margin:12px 0}
    .btn{display:block;text-align:center;padding:12px 14px;border-radius:12px;background:var(--black);color:#fff;border:0}
    .btn.ghost{background:#fff;border:1px solid #ddd;color:#111}
    .btn label{display:block;position:relative}
    .btn input[type=file]{position:absolute;inset:0;opacity:0;cursor:pointer}

    .tip{font-size:12px;color:#666;text-align:center;margin-top:2px}

    /* Gallery */
    .grid{display:grid;grid-template-columns:repeat(3,1fr);gap:8px;margin:14px 0}
    .thumb{position:relative;aspect-ratio:1/1;border-radius:10px;overflow:hidden;background:var(--gray);cursor:pointer}
    .thumb img{width:100%;height:100%;object-fit:cover;display:block}
    .thumb .del{position:absolute;top:4px;right:4px;border:0;border-radius:10px;height:24px;padding:0 8px;background:rgba(0,0,0,.65);color:#fff}

    /* toast */
    .toast{position:fixed;left:50%;bottom:12vh;transform:translateX(-50%);
      background:rgba(0,0,0,.8);color:#fff;padding:10px 14px;border-radius:12px;font-size:14px;
      opacity:0;pointer-events:none;transition:opacity .2s}
    .toast.show{opacity:1}
    .status{font-size:12px;color:#666;text-align:center;margin-top:6px}
  </style>
</head>
<body>
  <header>
    <h1>Case&amp;i</h1>
    <p class="sub">Minimal cases. Maximum you.</p>
  </header>

  <main class="wrap">
    <!-- HERO：默认用图片；选择视频后自动切换为视频 -->
    <section class="hero">
      <img id="heroImg" src="https://via.placeholder.com/1200x675?text=Case%26i+Hero" alt="hero">
      <video id="heroVideo" style="display:none" muted playsinline webkit-playsinline loop></video>
    </section>

    <div class="actions">
      <!-- 可见视频上传按钮（iOS 友好；支持 MP4/MOV） -->
      <button class="btn">
        <label>上传视频（MP4/MOV）
          <input id="videoInput" type="file" accept="video/mp4,video/quicktime,video/mov,video/m4v,video/*">
        </label>
      </button>
      <!-- 一键切回图片 -->
      <button id="toImage" class="btn ghost">切回图片</button>
    </div>
    <div id="status" class="status">状态：等待操作…</div>
    <div class="tip">提示：iOS 不支持 WebM，请使用 MP4 / MOV（H.264）。</div>

    <!-- Gallery：上传图片 → 即时预览；点击缩略图可将其设为 Hero 图片；可删除 -->
    <h3 style="margin:18px 0 8px;">Gallery</h3>
    <button class="btn ghost" style="width:100%;margin:0 0 8px;">
      <label>上传图片（可多选）
        <input id="imgInput" type="file" accept="image/*" multiple>
      </label>
    </button>
    <div class="grid" id="imgGrid"></div>

    <div id="toast" class="toast"></div>
  </main>

<script>
(function(){
  const heroImg   = document.getElementById('heroImg');
  const heroVideo = document.getElementById('heroVideo');
  const videoIn   = document.getElementById('videoInput');
  const toImage   = document.getElementById('toImage');
  const statusEl  = document.getElementById('status');
  const toast     = document.getElementById('toast');

  const imgIn     = document.getElementById('imgInput');
  const imgGrid   = document.getElementById('imgGrid');

  const setStatus = (t)=> statusEl.textContent = '状态：' + t;
  const tip = (t)=>{ toast.textContent = t; toast.classList.add('show'); setTimeout(()=>toast.classList.remove('show'), 1600); };

  function switchToVideo(url){
    heroVideo.muted = true; heroVideo.setAttribute('muted','');
    heroVideo.playsInline = true; heroVideo.setAttribute('playsinline',''); heroVideo.setAttribute('webkit-playsinline','');
    heroVideo.autoplay = true; heroVideo.loop = true; heroVideo.preload = 'metadata';
    heroVideo.src = url;
    heroImg.style.display = 'none';
    heroVideo.style.display = 'block';

    try{ heroVideo.load(); }catch(e){}
    const tryPlay = ()=> heroVideo.play().then(()=>setStatus('已开始播放')).catch(()=>{ heroVideo.controls = true; setStatus('自动播放受限，已显示控件'); });
    if (heroVideo.readyState >= 2) tryPlay();
    else {
      heroVideo.addEventListener('loadedmetadata', tryPlay, {once:true});
      heroVideo.addEventListener('canplay', tryPlay, {once:true});
      setTimeout(tryPlay, 500);
    }
  }
  function switchToImage(){
    try{ heroVideo.pause(); }catch(e){}
    heroVideo.removeAttribute('src');
    try{ heroVideo.load(); }catch(e){}
    heroVideo.controls = false;
    heroVideo.style.display = 'none';
    heroImg.style.display = 'block';
    setStatus('已切回图片');
  }

  // 视频上传
  videoIn.addEventListener('click', ()=> tip('选好后点右上角「完成/Done」'));
  function onVideoPicked(){
    const f = videoIn.files && videoIn.files[0];
    setStatus('检测文件… ' + (videoIn.files ? videoIn.files.length : 0));
    if(!f) return;
    const name=(f.name||'').toLowerCase(), type=(f.type||'').toLowerCase();
    if(type.includes('webm') || name.endsWith('.webm')) tip('⚠️ iOS 不支持 WebM，请用 MP4/MOV');
    const url = URL.createObjectURL(f);
    switchToVideo(url);
    tip('已选择：' + (f.name||'video'));
  }
  videoIn.addEventListener('change', onVideoPicked);
  document.addEventListener('visibilitychange', ()=>{ if(document.visibilityState==='visible') onVideoPicked(); });
  window.addEventListener('focus', onVideoPicked);
  toImage.addEventListener('click', switchToImage);

  // 图片上传 & 预览
  function addThumb(file){
    if(!file || !file.type.startsWith('image/')) return;
    const url = URL.createObjectURL(file);

    const cell = document.createElement('div');
    cell.className = 'thumb';

    const im = new Image();
    im.src = url; im.alt = file.name || 'image';
    cell.appendChild(im);

    const del = document.createElement('button');
    del.className = 'del'; del.textContent = '×';
    del.addEventListener('click', (e)=>{ e.stopPropagation(); URL.revokeObjectURL(url); cell.remove(); });
    cell.appendChild(del);

    cell.addEventListener('click', ()=>{
      switchToImage();
      heroImg.src = url;
      window.scrollTo({top:0, behavior:'smooth'});
    });

    imgGrid.prepend(cell);
  }
  imgIn.addEventListener('change', (e)=>{
    Array.from(e.target.files||[]).forEach(addThumb);
    imgIn.value = ''; // 允许重复选择同一文件
  });

  setStatus('等待操作…');
})();
</script>
</body>
</html>